//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""2872195a-df1c-49ea-8529-50bd906d26b0"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""bc3f770a-7173-45b1-9d53-027a08254eac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ceabe2df-327c-44a0-9a2c-bca531ebf142"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""67bd0f71-35b2-491c-874c-6369cb52f733"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select First Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""1eb6afa4-c25e-4f5d-9a4d-5e86fc8b3e07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Second Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""8a1a4f94-4aa7-4678-b830-48eedf097bcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Third Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""bad5c658-77da-4696-8d92-4ce7ef552c6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Fourth Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""a0084845-8408-43e5-b25c-d7c462319fc6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Check"",
                    ""type"": ""Button"",
                    ""id"": ""688b9932-6c78-42dc-a66e-e261a85cf6cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8b3c8147-cdee-4d3a-b156-a9d5b61321a7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""318e83b3-c898-40a3-b342-ac90202f1712"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4cde9c41-2119-4016-b14b-33e2f35bcbdf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a6f5e14f-cf0a-4d3d-b246-6cfe470a2e4c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0b2869e6-f442-4d2a-b5da-5fa75494e8af"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6d0b57f0-cf0a-4455-8b95-5cb47fd09e96"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""926fc6ce-3e65-41e7-aeac-557578e800e7"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9907fa09-a2bc-46bf-98a8-0de5f1de6f71"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select First Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b39483f-82ba-4583-9a17-3e863c879c4e"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Third Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""131a2442-4ed7-418b-be8d-33d9207158d0"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Fourth Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ae80394-b995-4e87-937b-70a4ca4f8bd9"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Second Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6614563-b021-4359-8e34-84e851a420a2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Check"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_SelectFirstWeapon = m_Player.FindAction("Select First Weapon", throwIfNotFound: true);
        m_Player_SelectSecondWeapon = m_Player.FindAction("Select Second Weapon", throwIfNotFound: true);
        m_Player_SelectThirdWeapon = m_Player.FindAction("Select Third Weapon", throwIfNotFound: true);
        m_Player_SelectFourthWeapon = m_Player.FindAction("Select Fourth Weapon", throwIfNotFound: true);
        m_Player_Check = m_Player.FindAction("Check", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_SelectFirstWeapon;
    private readonly InputAction m_Player_SelectSecondWeapon;
    private readonly InputAction m_Player_SelectThirdWeapon;
    private readonly InputAction m_Player_SelectFourthWeapon;
    private readonly InputAction m_Player_Check;
    public struct PlayerActions
    {
        private @InputActions m_Wrapper;
        public PlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @SelectFirstWeapon => m_Wrapper.m_Player_SelectFirstWeapon;
        public InputAction @SelectSecondWeapon => m_Wrapper.m_Player_SelectSecondWeapon;
        public InputAction @SelectThirdWeapon => m_Wrapper.m_Player_SelectThirdWeapon;
        public InputAction @SelectFourthWeapon => m_Wrapper.m_Player_SelectFourthWeapon;
        public InputAction @Check => m_Wrapper.m_Player_Check;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Interact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @SelectFirstWeapon.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectFirstWeapon;
                @SelectFirstWeapon.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectFirstWeapon;
                @SelectFirstWeapon.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectFirstWeapon;
                @SelectSecondWeapon.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectSecondWeapon;
                @SelectSecondWeapon.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectSecondWeapon;
                @SelectSecondWeapon.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectSecondWeapon;
                @SelectThirdWeapon.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectThirdWeapon;
                @SelectThirdWeapon.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectThirdWeapon;
                @SelectThirdWeapon.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectThirdWeapon;
                @SelectFourthWeapon.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectFourthWeapon;
                @SelectFourthWeapon.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectFourthWeapon;
                @SelectFourthWeapon.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectFourthWeapon;
                @Check.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCheck;
                @Check.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCheck;
                @Check.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCheck;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @SelectFirstWeapon.started += instance.OnSelectFirstWeapon;
                @SelectFirstWeapon.performed += instance.OnSelectFirstWeapon;
                @SelectFirstWeapon.canceled += instance.OnSelectFirstWeapon;
                @SelectSecondWeapon.started += instance.OnSelectSecondWeapon;
                @SelectSecondWeapon.performed += instance.OnSelectSecondWeapon;
                @SelectSecondWeapon.canceled += instance.OnSelectSecondWeapon;
                @SelectThirdWeapon.started += instance.OnSelectThirdWeapon;
                @SelectThirdWeapon.performed += instance.OnSelectThirdWeapon;
                @SelectThirdWeapon.canceled += instance.OnSelectThirdWeapon;
                @SelectFourthWeapon.started += instance.OnSelectFourthWeapon;
                @SelectFourthWeapon.performed += instance.OnSelectFourthWeapon;
                @SelectFourthWeapon.canceled += instance.OnSelectFourthWeapon;
                @Check.started += instance.OnCheck;
                @Check.performed += instance.OnCheck;
                @Check.canceled += instance.OnCheck;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnSelectFirstWeapon(InputAction.CallbackContext context);
        void OnSelectSecondWeapon(InputAction.CallbackContext context);
        void OnSelectThirdWeapon(InputAction.CallbackContext context);
        void OnSelectFourthWeapon(InputAction.CallbackContext context);
        void OnCheck(InputAction.CallbackContext context);
    }
}
